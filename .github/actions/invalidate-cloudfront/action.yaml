name: Invalidate CloudFront
description: Invalidate CloudFront

inputs:
  mode:
    description: What to invalidate - "pages" or "posts" or "content" or "all"
    default: content
  aws-region:
    description: AWS region
    default: ap-southeast-2
  lookup-role-arn:
    description: AWS cdk diff role arn
    required: true
  invalidator-role-arn:
    description: AWS cloudfront invalidator role arn
    required: true

runs:
  using: composite
  steps:
    - uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-region: ${{ inputs.aws-region }}
        role-to-assume: ${{ inputs.lookup-role-arn }}
        role-session-name: ${{ github.triggering_actor }}@${{ github.event.repository.owner }}@${{ github.event.repository.name }}@${{ github.job }}@${{ github.run_id }}
        role-skip-session-tagging: true
        role-duration-seconds: 3600

    - shell: bash
      id: describe
      run: |
        stack=$(
          aws cloudformation describe-stacks \
            --stack-name BlogStack \
            --region us-east-1
        )

        distribution_id=$(
          echo $stack \
          | jq -rM '.Stacks[0].Outputs[] | select(.OutputKey == "DistributionId").OutputValue'
        )

        echo "distribution_id=$distribution_id" >> $GITHUB_OUTPUT

        if [[ "$distribution_id" == "" ]]; then
          echo "::error::No distribution id found"
          exit 1
        fi

    - uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-region: ${{ inputs.aws-region }}
        role-to-assume: ${{ inputs.invalidator-role-arn }}
        role-session-name: ${{ github.triggering_actor }}@${{ github.event.repository.owner }}@${{ github.event.repository.name }}@${{ github.job }}@${{ github.run_id }}
        role-skip-session-tagging: true
        role-duration-seconds: 3600

    - shell: bash
      id: invalidate
      run: |
        case "${{ inputs.mode }}" in
        posts)
          invalidation=$(
            aws cloudfront create-invalidation \
              --distribution-id ${{ steps.describe.outputs.distribution_id }} \
              --paths "/categories/*" "/posts/*" "/search/*" "/tags/*" "/index.html" "/index.xml" "/sitemap.xml"
          )
          ;;
        pages)
          invalidation=$(
            aws cloudfront create-invalidation \
              --distribution-id ${{ steps.describe.outputs.distribution_id }} \
              --paths "/categories/*" "/page/*" "/pages/*" "/search/*" "/index.html" "/index.xml" "/sitemap.xml"
          )
          ;;
        content)
          invalidation=$(
            aws cloudfront create-invalidation \
              --distribution-id ${{ steps.describe.outputs.distribution_id }} \
              --paths "/categories/*" "/page/*" "/pages/*" "/posts/*" "/search/*" "/tags/*" "/index.html" "/index.xml" "/sitemap.xml"
          )
          ;;
        all)
          invalidation=$(
            aws cloudfront create-invalidation \
              --distribution-id ${{ steps.describe.outputs.distribution_id }} \
              --paths "/*"
          )
          ;;
        *)
          echo "::error::Invalid mode: ${{ inputs.mode }}"
          exit 1
          ;;
        esac

        invalidation_id=$( echo $invalidation | jq -rM '.Invalidation.Id' )
        echo "invalidation_id=$invalidation_id" >> $GITHUB_OUTPUT

    - shell: bash
      run: |
        aws cloudfront wait invalidation-completed \
          --distribution-id ${{ steps.describe.outputs.distribution_id }} \
          --id ${{ steps.invalidate.outputs.invalidation_id }}
